#include <msp430.h> 
#include "fix_fft.h"
#include <math.h>
#include <screen.h>
// Circular Memory - Time DEcimation in place whem sampling
// LCD Memory using for scroll event and draw extra memory first, then draw it (Screen Optimization)
// Writing Pixel by pixel is not possible, so at first we draw line by line but it was slow. Then we use
// First creating a memory for full spectrum then, write to screen 107x24

/**
 * main.c
 */

const char dat[1024] = {0, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, -1, 55, 110, -14, 40, 93, -32, 21, 73, -53, -1, 52, -74, -22, 31, -94, -41, 13, -111, -56, -1, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, -1, 55, 110, -14, 40, 93, -32, 21, 73, -53, 0, 52, -74, -22, 31, -94, -41, 13, -111, -56, -1, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, 0, 52, -74, -22, 31, -94, -41, 13, -111, -56, -1, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, 0, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, -1, 55, 110, -14, 40, 93, -32, 21, 73, -53, 0, 52, -74, -22, 31, -94, -41, 13, -111, -56, -1, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, 0, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, 0, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, -1, 55, 110, -14, 40, 93, -32, 21, 73, -53, 0, 52, -74, -22, 31, -94, -41, 13, -111, -56, -1, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, 0, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, -1, 55, 110, -14, 40, 93, -32, 21, 73, -53, 0, 52, -74, -22, 31, -94, -41, 13, -111, -56, -1, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, 0, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, -1, 55, 110, -14, 40, 93, -32, 21, 73, -53, 0, 52, -74, -22, 31, -94, -41, 13, -111, -56, -1, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, -1, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, -1, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 128, 7, 65, 122, -1, 55, 110, -14, 40, 93, -32, 21, 73, -53, -1, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, 0, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, -1, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, -1, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, -1, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, -1, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21, 87, -26, 40, 105, -9, 55, 119, 3, 65, 126, 8, 68, 127, 7, 65, 122, 0, 55, 110, -14, 40, 93, -32, 21, 73, -53, 0, 52, -74, -22, 31, -94, -41, 13, -111, -56, 0, -123, -66, -8, -128, -69, -9, -127, -66, -4, -120, -56, 8, -106, -41, 25, -88, -22, 45, -67, -1, 66, -46, 21};
signed char im[1024];
signed char real[1024];

unsigned char operationMode = 0;



unsigned short spectrumMode(){

    operationMode = 1;

    adc_on();

    spectrumAxis();

}


int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	
	initClockTo16MHz();

    adc_config();

    timerA_config();


	P1DIR |= BIT0;

	P1OUT &= ~BIT0;

    screenConfig();



    //printOpenningScreen();
            __no_operation();

    menu();
/*
            unsigned int i = 0;
            for (i = 0; i < 256; i++)
            {
                    int newIndex = findDecimationIndex(i,8);
                    //printf("N: %d | O: %d\n", newIndex, i);
                    real[newIndex] = dat[i];

            }

            fix_fft(real,im,8,0); // Send the data through fft
*/
	/*
            unsigned short b = 0;
            for (i=0; i< 128 ;i++){
                b = real[i] * real[i];
                b += im[i] * im[i];

                if(b>127)
                    b = 127;
                real[i] = (char)b;
                //printf("%d ",data[i]);
            }
*/

    unsigned int i = 0;
    for (i = 0; i < 256; i++)
    {
            int newIndex = findDecimationIndex(i,8);
            real[newIndex] = dat[i];
    }
    unsigned char max_mag = spectrum(real,im);
    spectrumScreen(real,max_mag);

/*

            unsigned int i = 0;
            for (i = 0; i < 1024; i++)
            {
                    int newIndex = findDecimationIndex(i,10);
                    printf("N: %d | O: %d\n", newIndex, i);
                    real[newIndex] = dat[i];

            }

            fix_fft(real,im,10,0); // Send the data through fft
*/
/*
    unsigned int i = 0;
	for (i = 0; i < 512; i++)
	{
	        int newIndex = findDecimationIndex(i,9);
	        printf("N: %d | O: %d\n", newIndex, i);
	        real[newIndex] = dat[i];

	}

	fix_fft(real,im,9,0); // Send the data through fft

	__no_operation();
*/

/*
	unsigned short b = 0;
	for (i=0; i< 512 ;i++){
	    b = real[i] * real[i];
	    b += im[i] * im[i];

	    if(b>127)
	        b = 127;
	    real[i] = (char)b;
	    //printf("%d ",data[i]);
	}

*/

	P1OUT |= BIT0;
	__no_operation();

	//test_adc();

	while(1){
	    __no_operation();
	}
}
